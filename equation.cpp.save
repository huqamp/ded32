#include <math.h>
#include <stdio.h>

#define infinity_roots 3

#define ASSERT(condition)                   \
    if(!(condition))                        \
        printf("Error in %s in %d line\n",  \
                #condition, __LINE__);      \

struct TestUnit {
    double a;
    double b;
    double c;
    int number_roots;
    double first_root;
    double second_root;
};

void input_clear(void) {
    _flushall();
}

void input_roots(double* a, double* b, double* c) {
    printf("Enter odds\n");
    
    if (a == NULL or b == NULL or c == NULL) {
        printf("Zero pointer\n");
        return;
    }
    
    while (scanf("%lg %lg %lg", a, b, c) != 3) {
        input_clear();
        printf("Enter odds\n"
               "Incorrect input\n");
    }

}

void output_roots(int number_roots, double x1, double x2) {
    switch (number_roots) {
    case 0:
        printf("No solutions");
        break;
    case 1:
        printf("%lg", x1);
        break;
    case 2:
        printf("%lg %lg", x1, x2);
        break;
    case infinity_roots:
        printf("Infinity_roots");
        break;
    default:
        printf("WTF");
        break;
    }
}

int compare(double a, double b) {
    const double con = 0.000001;
    return (fabs(a - b) < con);
}

double min(double a, double b) {
    if (a > b) return b;
    return a;
}

double max(double a, double b) {
    if (a > b) return a;
    return b;
}

int find_roots(double a, double b, double c, double* x1, double* x2) {
    if (compare(a, 0)) {
         if (compare(b, 0)) {
            if (compare(c, 0)) return infinity_roots;
            else return 0;
         }
         else {
            if (compare(c, 0)) return infinity_roots;
            ASSERT(!compare(b, 0));
            *x1 = *x2 = -c / b;
            return 1;
         }
    }
    else {
       if (compare(c, 0)) {
          if (compare(b, 0)) {
            *x1 = *x2 = 0;
            return 1;
          }
          ASSERT(!(compare(a, 0)));
          double sq = -b / a;
          *x1 = min(sq, 0);
          *x2 = max(sq, 0);
          return 2;
       }
       double d = b * b - 4 * a * c;
       double a2 = 2 * a;
       ASSERT(!compare(a, 0));
       if (d < 0) return 0;
       else if (compare(d, 0)) {
            *x1 = *x2 = -b / a2;
            return 1;
       }
       else {
            double sqrt_d = sqrt(d);
            double sq1 = (-b - sqrt_d) / a2,
                   sq2 = (-b + sqrt_d) / a2;
            *x1 = min(sq1, sq2);
            *x2 = max(sq1, sq2);
            ASSERT(!(compare(*x1, *x2)));
            return 2;
       }
    }
}

void unit_test_roots(void) {
    double x1 = 0, x2 = 0;
    struct TestUnit mas[] = {0, 0,  0, infinity_roots, 0,   0,
            0, 5,  0, infinity_roots, 0,   0,
            0, 5, -5, 1,              1,   1,
            1, 2,  1, 1,             -1,  -1,
            2, 5,  2, 2,             -2, -0.5};
    int errors=0, all = sizeof(mas) / sizeof (mas[0]);
    for (int i = 0; i < all; i++) {
        int number_tests_roots = find_roots(mas[i].a, mas[i].b, mas[i].c, &x1, &x2);
        if (mas[i].number_roots != number_tests_roots || !(compare(mas[i].first_root,x1)) || !(compare(mas[i].second_root,x2))) {
            printf("Warning, test=%d, first_root = %lg, second_root = %lg, true_first_root = %lg, true_second_root = %lg\n", i / 6 + 1, x1, x2, mas[i].first_root, mas[i].second_root);
            errors++;
        }
        else printf("Accept\n");
    }
    printf("Accepted - %d, errors - %d\n", all - errors, errors);



}
